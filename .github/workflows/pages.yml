name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '33 5 * * *'
  workflow_dispatch:
  workflow_call:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read  # required for actions-timeline

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  actions-timeline:
    needs: [build, deploy, call-scraping-workflow, call-vrt-init]
    runs-on: ubuntu-latest
    steps:
      - uses: Kesin11/actions-timeline@427ee2cf860166e404d0d69b4f2b24012bb7af4f # v2.2.3

  update-astro-db:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    environment: google-analytics-4
    
    outputs:
      is-change: ${{ steps.cat.outputs.isChange }}

    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          filter: blob:none

      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-oidc/providers/github-oidc'
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.tool-versions'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: update ga4
        env:
          ASTRO_DB_REMOTE_URL: ${{ secrets.ASTRO_DB_REMOTE_URL }}
          ASTRO_DB_APP_TOKEN: ${{ secrets.ASTRO_DB_APP_TOKEN }}
        run: pnpm run db:update

      - name: output changed
        id: cat
        run: |
          echo "isChange=$(cat db/isChange.txt)" >> $GITHUB_OUTPUT

  build:
    needs: [update-astro-db]
    runs-on: ubuntu-latest
    outputs:
      artifacts_sha256: ${{ steps.sha256.outputs.artifacts }}
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          filter: blob:none

      - name: Restore astro build cache
        uses: actions/cache/restore@v4
        with:
          path: .astro/cache
          key: astro-build-
          restore-keys: astro-build-

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.tool-versions'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Pre build
        run: |
          pnpm run build

      - name: Calcurate hash
        id: sha256
        run: |
          set -x
          SHA256_OUTPUT=$(find ./dist -type f -print0 | \
            sort --zero-terminated | \
            xargs -0 sha256sum | \
            cut -d ' ' -f 1 | \
            sha256sum | \
            cut -d ' ' -f 1)
          set +x
          echo "artifacts=$SHA256_OUTPUT" >> $GITHUB_OUTPUT

      - name: Verify
        env: 
          ASTRO_DB_REMOTE_URL: ${{ secrets.ASTRO_DB_REMOTE_URL }}
          ASTRO_DB_APP_TOKEN: ${{ secrets.ASTRO_DB_APP_TOKEN }}
        run: |
          npx astro db verify
  
      - name: Build
        env: 
          ASTRO_DB_REMOTE_URL: ${{ secrets.ASTRO_DB_REMOTE_URL }}
          ASTRO_DB_APP_TOKEN: ${{ secrets.ASTRO_DB_APP_TOKEN }}
        run: |
          pnpm run build -- --remote

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    if: (vars.RECENT_ARTIFACTS_SHA256 != needs.build.outputs.artifacts_sha256) || (needs.update-astro-db.outputs.is-change == 'true')
    needs: 
      - update-astro-db
      - build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@main

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GH_APP_ID_KOROSUKE613_HOMEPAGE_2ND }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY_KOROSUKE613_HOMEPAGE_2ND }}

      - name: Set new sha256 to variable
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh variable set RECENT_ARTIFACTS_SHA256 --body ${{ needs.build.outputs.artifacts_sha256 }}
          echo "### Now changed SHA256" >> $GITHUB_STEP_SUMMARY
          echo "||SHA256|" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY          
          echo "|Old|\`${{ vars.RECENT_ARTIFACTS_SHA256 }}\`|" >> $GITHUB_STEP_SUMMARY
          echo "|New|\`${{ needs.build.outputs.artifacts_sha256 }}\`|" >> $GITHUB_STEP_SUMMARY

  call-scraping-workflow:
    needs:
      - deploy
    uses: ./.github/workflows/scraping.yaml
    secrets: inherit

  call-vrt-init:
    needs:
      - build
      - deploy
    uses: ./.github/workflows/vrt-init.yaml
    with:
      sha: ${{ needs.build.outputs.artifacts_sha256 }}

  notify-on-fail:
    needs:
      - build
      - deploy
      - call-scraping-workflow
      - call-vrt-init
    if: failure()
    uses: korosuke613/actions/.github/workflows/notify-to-slack.yaml@main
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    with:
      status: failure
