---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import * as path from 'node:path';
import { ContentPost } from '@/partials/ContentPost';
import Base from '@/templates/Base.astro';
import { AppConfig } from '@/utils/AppConfig';
import { readTags } from '@/utils/Tag';
import { getSimilarPosts } from '@/utils/TextSimilarity';
import { getCommitHistories } from '@/utils/CommitHistories';
import { DormitoryIntroduction } from '@/utils/StaticPages';

export async function getStaticPaths() {
  const blogEntries = await getCollection('posts', ({ data }) => {
    return data.draft !== true;
  });
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

const title = `${entry.data.title} - ${AppConfig.site_name}`;
const tags = await readTags();

const entries = await getCollection('posts', ({ data }) => {
  return data.draft !== true;
});
// 国際交流宿舎の紹介用の特別措置
entries.push(DormitoryIntroduction as unknown as CollectionEntry<'posts'>);

const similars = getSimilarPosts(entry, entries);

const filePath = `src/content/posts/${entry.id}`;
const histories = await getCommitHistories(filePath);

const ogpUrl = entry.data.imgSrc
  ? path.join('https://korosuke613.dev/', entry.data.imgSrc)
  : undefined;
---

<Base
  head={{
    title,
    description: entry.data.description,
    ogpUrl,
  }}
>
  <ContentPost
    frontmatter={entry}
    contentCategory={'Posts'}
    headings={headings}
    similars={similars}
    histories={histories}
    tags={tags.posts}
  >
    <Content />
  </ContentPost>
</Base>
