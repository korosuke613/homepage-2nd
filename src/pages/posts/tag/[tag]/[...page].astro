---
import { getCollection } from 'astro:content';

import Post from '@/pages/posts/[...page].astro';
import type {
  ArticleFrontmatterPage,
  IPost,
} from '@/types/IArticleFrontmatter';
import { sortByDate } from '@/utils/Posts';
import { DormitoryIntroduction } from '@/utils/StaticPages';
import { generateTagsFromMarkdowns } from '@/utils/Tag';

type GetStaticPaths = {
  paginate: any;
}; // Overrides `GetStaticPathsOptions` types from Astro

export async function getStaticPaths({ paginate }: GetStaticPaths) {
  const allPosts: IPost[] = await getCollection('posts', ({ data }) => {
    return data.draft !== true;
  });
  allPosts.push(DormitoryIntroduction);
  const tags = Object.keys(generateTagsFromMarkdowns(allPosts));
  const sortedPosts = sortByDate(allPosts);

  return tags.map((tag) => {
    const filteredPosts = sortedPosts.filter((post) =>
      post.data.tags.includes(tag),
    );
    return paginate(filteredPosts, { params: { tag }, pageSize: 9 });
  });
}

interface Props {
  page: ArticleFrontmatterPage;
}

const { page } = Astro.props as Props;
const { tag } = Astro.params;
---

<Post page={page} preTitle={tag} />
