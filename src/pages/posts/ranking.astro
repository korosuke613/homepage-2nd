---
import { type CollectionEntry, getCollection } from "astro:content";
import { Blogs, Posts, Zenns, db, desc } from "astro:db";
import { ExternalLink } from "@/components/ExternalLink";
import {
  MarkdownHeadingComponent,
  convertMarkdownHeadingsToObject,
} from "@/components/Headings";
import { ContentPost } from "@/partials/ContentPost";
import Base from "@/templates/Base.astro";
import { AppConfig } from "@/utils/AppConfig";
import { getSortedBlogData } from "@/utils/Blog";
import { getCommitHistories } from "@/utils/CommitHistories";
import { Ranking as RankingStaticPage, StaticPages } from "@/utils/StaticPages";
import { readTags } from "@/utils/Tag";
import { getSimilarPosts } from "@/utils/TextSimilarity";
import type { MarkdownHeading } from "astro";

// ランキングの上限数
const RANKING_LIMIT = 30;

type RankingItem = {
  rank: number;
  path: string;
  title: string;
  views: number;
};

const postsData = await db
  .select()
  .from(Posts)
  .orderBy(desc(Posts.screenPageViews))
  .limit(RANKING_LIMIT);

const blogsData = await db
  .select()
  .from(Blogs)
  .orderBy(desc(Blogs.click))
  .limit(RANKING_LIMIT);

const zennsData = await db
  .select()
  .from(Zenns)
  .orderBy(desc(Zenns.screenPageViews))
  .limit(RANKING_LIMIT);

const tags = await readTags();

const title = `${RankingStaticPage.data.title} - ${AppConfig.site_name}`;

const filePath = "src/pages/posts/ranking.astro";
const histories = await getCommitHistories(filePath);

const entries = await getCollection("posts", ({ data }) => data.draft !== true);
const similars = getSimilarPosts(
  {
    ...RankingStaticPage,
    body: "",
  },
  entries,
);

const postsCollection = await getCollection(
  "posts",
  ({ data }) => data.draft !== true,
);
const postsRanking: RankingItem[] = [];
let index = 1;
for (const p of postsData) {
  const pageTitle = [...postsCollection, ...StaticPages].find(
    (post) => post.slug === p.pagePath.replace("/posts/", ""),
  )?.data.title;
  if (!pageTitle) {
    continue;
  }
  postsRanking.push({
    rank: index,
    path: p.pagePath,
    title: pageTitle,
    views: p.screenPageViews,
  });
  index += 1;
}

const blogsCollection = await getSortedBlogData();
const blogsRanking: RankingItem[] = [];
index = 1;
for (const b of blogsData) {
  const pageTitle = blogsCollection.find(
    (blog) => blog.url === b.linkUrl,
  )?.title;
  if (!pageTitle) {
    continue;
  }
  blogsRanking.push({
    rank: index,
    path: b.linkUrl,
    title: pageTitle,
    views: b.click,
  });
  index += 1;
}

const zennsCollection = await getSortedBlogData();
const zennsRanking: RankingItem[] = [];
index = 1;
for (const z of zennsData) {
  const pageTitle = zennsCollection.find(
    (zenn) => zenn.url.replace("https://zenn.dev", "") === z.pagePath,
  )?.title;
  if (!pageTitle) {
    continue;
  }
  zennsRanking.push({
    rank: index,
    path: z.pagePath,
    title: pageTitle,
    views: z.screenPageViews,
  });
  index += 1;
}

const markdownHeadings: MarkdownHeading[] = [
  { depth: 2, slug: "Posts", text: "Posts" },
  { depth: 2, slug: "Zenn", text: "Zenn" },
  { depth: 2, slug: "Blogs", text: "Blogs" },
];

const headings = convertMarkdownHeadingsToObject(markdownHeadings);
---
<Base
  head={{
    title,
    description: RankingStaticPage.data.description!,
  }}
>
  <ContentPost
    frontmatter={RankingStaticPage as unknown as CollectionEntry<"posts">}
    contentCategory={"Posts"}
    headings={markdownHeadings}
    tags={tags.posts}
    similars={similars}
    histories={histories}
  >
    <p>
      このページでは、アクセス数の多い記事やブログをランキング形式で紹介しています。
      大体毎日更新されます。
      期間は最大 14 ヶ月間です。
      各項目は、最大30位まで表示されます。
    </p>
    <MarkdownHeadingComponent heading={headings.Posts} />
    <table>
      <thead>
        <tr>
          <th align="right">順位</th>
          <th>タイトル</th>
          <th align="right">Views</th>
        </tr>
      </thead>
      <tbody>
        {postsRanking.map((p) => (
            <tr>
              <td style="width:2.5rem;" align="right">{p.rank}位</td>
              <td>
                <a href={p.path} class="line-clamp-1">{p.title}</a>
              </td>
              <td align="right">{p.views}</td>
            </tr>
          ))
      }
      </tbody>
    </table>

    <MarkdownHeadingComponent heading={headings.Zenn} />
    <table>
      <thead>
        <tr>
          <th align="right">順位</th>
          <th>タイトル</th>
          <th align="right">Views</th>
        </tr>
      </thead>
      <tbody>
        {zennsRanking.map((z) => (
            <tr>
              <td style="width:2.5rem;" align="right">{z.rank}位</td>
              <td>
                <span class="line-clamp-1">
                  <ExternalLink url={`https://zenn.dev${z.path}`}>{z.title}</ExternalLink>
                </span>
              </td>
              <td align="right">{z.views}</td>
            </tr>
          ))
      }
      </tbody>
    </table>

    <MarkdownHeadingComponent heading={headings.Blogs} />
    <table>
      <thead>
        <tr>
          <th align="right">順位</th>
          <th>タイトル</th>
          <th align="right">Clicks</th>
        </tr>
      </thead>
      <tbody>
        {blogsRanking.map((b) => (
            <tr>
              <td style="width:2.5rem;" align="right">{b.rank}位</td>
              <td>
                <span class="line-clamp-1">
                  <ExternalLink url={b.path}>{b.title}</ExternalLink>
                </span>
              </td>
              <td align="right">{b.views}</td>
            </tr>
          ))
      }
      </tbody>
    </table>
  </ContentPost>
</Base>
