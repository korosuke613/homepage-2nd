---
import Blogs from '@/templates/Blogs.astro';
import type { BlogPage } from '@/types/IBlogPage';
import { getSortedBlogData } from '@/utils/Blog';
import { escapeTag, readTags } from '@/utils/Tag';

type GetStaticPaths = {
  paginate: any;
}; // Overrides `GetStaticPathsOptions` types from Astro

export async function getStaticPaths({ paginate }: GetStaticPaths) {
  const sorteBlogs = await getSortedBlogData();

  const tags = (await readTags()).blogs;
  if (tags === undefined) {
    throw new Error('readed tags is undefined');
  }

  return Object.keys(tags).map((tagName) => {
    const filteredPosts = sorteBlogs.filter(
      (post) =>
        post.type === tagName.toLowerCase() || post.category.includes(tagName),
    );
    const escapeTagName = escapeTag(tagName);
    return paginate(filteredPosts, {
      params: { tag: escapeTagName },
      pageSize: 9,
    });
  });
}

interface Props {
  page: BlogPage;
}

const { page } = Astro.props as Props;
const { tag } = Astro.params;

const originTag = (tag as string).replace('_', '/');
---

<meta name="robots" content="noindex" />

<Blogs
  page={page}
  contentCategory="Blogs"
  contentDescription="外部のブログ記事（自動更新）"
  preTitle={originTag}
/>
